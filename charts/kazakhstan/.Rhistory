c6.max <- max(c6data$value,na.rm=TRUE)
for(j in 1:length(indicators)){
ind = indicators[j]
indname = c6names[j]
c6data$indicator[which(c6data$indicator==ind)] = indname
}
c6names <- as.character(subset(c6names,c6names %in% unique(c6data$indicator)))
c6data$indicator <- factor(c6data$indicator,levels=c6names)
c6data <- c6data[order(is.na(c6data$value),c6data$year,match(c6data$indicator,c6names)),]
c6data <- ddply(c6data, .(year),
transform, pos = (100-cumsum(value)) + (0.5 * value)
,valid = sum(!is.na(value),na.rm=TRUE))
if(nrow(c6data)>0){
c6data <- subset(c6data,valid>=1)
c6.key.data = data.frame(
indicator = unique(c6data$indicator),
year = as.numeric(rep(NA,length(unique(c6data$indicator)))),
value = as.numeric(rep(NA,length(unique(c6data$indicator)))),
pos = as.numeric(rep(NA,length(unique(c6data$indicator)))),
valid = as.numeric(rep(NA,length(unique(c6data$indicator))))
)
c6 <- ggplot(c6data,aes(year,value,fill=indicator)) +
geom_bar(stat="identity",width=0.7,color="transparent",size=1,show.legend=F) +
geom_point(data=c6.key.data,aes(fill=indicator),size=12,color="transparent",stroke=0,shape=22) +
scale_fill_manual(
labels=factor(c6names,levels=unique(c6data$indicator))
,values=quintileFillValues
,drop = FALSE
) +
guides(fill=guide_legend(title=element_blank(),nrow=2,byrow=TRUE)) +
simple_style  +
scale_y_continuous(expand = c(0,0)) +
theme(
legend.position="top"
,legend.text = element_text(size=25,color=blue,family="Averta Regular")
,legend.justification=c(0,0)
,legend.direction="horizontal"
,axis.title.x=element_blank()
,axis.title.y=element_blank()
,axis.ticks=element_blank()
,axis.line.y = element_blank()
,axis.line.x = element_line(color=blue, size = 1.1)
,axis.text.y = element_blank()
,axis.text.x = element_text(size=35,color=blue,margin=margin(t=20,r=0,b=0,l=0),family="Averta Regular")
,legend.background = element_rect(fill = "transparent", colour = "transparent")
,legend.key = element_rect(fill = "transparent", colour = "transparent")
,legend.key.size = unit(2.2,"lines")
) + geom_text(data=subset(c6data,value>5,decreasing=T),size=10,aes(y=pos,label=paste0(safeFormat(value),"%"),color=indicator),show.legend=FALSE,family="Averta Regular") +
scale_color_manual(breaks=c6names,values=c(blue,blue,blue,blue,blue),drop=FALSE)
}else{
c6 = NULL
}
# Chart 23
wasting = as.numeric(subset(countrydat, indicator=="coexistence" & disagg.value=="Wasting alone")$value)/100
stunting = as.numeric(subset(countrydat, indicator=="coexistence" & disagg.value=="Stunting alone")$value)/100
overweight = as.numeric(subset(countrydat, indicator=="coexistence" & disagg.value=="Overweight alone")$value)/100
wasting_and_stunting = as.numeric(subset(countrydat, indicator=="coexistence" & disagg.value=="Wasting and stunting")$value)/100
stunting_and_overweight = as.numeric(subset(countrydat, indicator=="coexistence" & disagg.value=="Stunting and overweight")$value)/100
all = 1
year = as.character(subset(countrydat, indicator=="coexistence" & disagg.value=="Free from")$year)
free = as.numeric(subset(countrydat, indicator=="coexistence" & disagg.value=="Free from")$value)/100
combinations = c(
A=0
,B=0
,C=0
,D=all
,"A&B"=0
,"A&C"=0
,"A&D"=wasting
,"B&C"=0
,"B&D"=stunting
,"C&D"=overweight
,"A&B&C"=0
,"A&B&D"=wasting_and_stunting
,"A&C&D"=0
,"B&C&D"=stunting_and_overweight
,"A&B&C&D"=0
)
label.vals = combinations
if(length(wasting)>0){
label.vals["A&D"] = wasting
label.vals["B&D"] = stunting
label.vals["C&D"] = overweight
label.vals["D"] = free
}
label.text = percent(label.vals)
if( this.country != "Global"){
label.text[which(label.vals<=0.02)] = ""}
c23_dat = tryCatch({euler(combinations,shape="ellipse")},error=function(e){NULL})
if(!is.null(c23_dat) & length(free) > 0 ){
c23 = plot(c23_dat,
main=list(label=paste0("Year, ",year),col=blue,vgap=2,fontsize=20,fontfamily="Averta Regular",vjust=1.4)
,legend = list(labels=c("Wasting only","Stunting only","Overweight only","No wasting, stunting or overweight"),vgap=2,fontsize=25,fontfamily="Averta Regular")
,edges = list(col="transparent",lwd=3)
,quantities = list(labels=label.text,fontsize=20,col=blue,fontfamily="Averta Regular")
,fills=list(fill=c(yellow,orange,light.blue,grey),alpha=1)
)
}else{
c23 = NULL
}
# Chart 35
if(this.country %in% c(unique(dat_country$country),unique(dat_reg$country))){
test = subset(countrydat,year==2018&indicator %in% c("BN_ODA_received","BN_ODA_donated"))
if(nrow(test)!=0){
if(unique(test$indicator=="BN_ODA_received")){
c35names = c("% of total ODA","Basic nutrition ODA received")
indicators=c("BN_ODA_received_percent","BN_ODA_received")
y.lab = "ODA, US$ millions"
}else{
c35names = c("% of total ODA","Basic nutrition ODA disbursed")
indicators=c("BN_ODA_donated_percent","BN_ODA_donated")
y.lab = "ODA, US$ millions"
}
}
}
c35data = subset(countrydat,indicator %in% indicators)
if(!empty(c35data) && !(length(unique(as.numeric(c35data$value)))==1)){
c35data$value = as.numeric(c35data$value)
c35data = subset(c35data, !is.na(value))
c35data = c35data[c("year","indicator","value")]
c35.oda.max <- max(subset(c35data,indicator==indicators[2])$value,na.rm=TRUE)
c35.perc.max <- max(subset(c35data,indicator==indicators[1])$value,na.rm=TRUE)
# Why *1.25? Need to sort.
c35.ratio = (c35.oda.max/c35.perc.max)*1.25
c35.oda.max = c35.oda.max*1.25
for(j in 1:length(indicators)){
ind = indicators[j]
indname = c35names[j]
c35data$indicator[which(c35data$indicator==ind)] = indname
}
c35.key.data.2 = data.frame(year=as.numeric(rep(NA,1)),indicator=c35names[2],value=as.numeric(rep(NA,1)))
c35.key.data.1 = data.frame(year=as.numeric(rep(NA,1)),indicator=c35names[1],value=as.numeric(rep(NA,1)))
c35 = ggplot(subset(c35data,indicator==c35names[2]),aes(x=year,y=value)) +
geom_area(alpha=1,show.legend=F,color="transparent",fill=yellow) +
geom_point(data=c35.key.data.2,aes(group=indicator,fill=indicator),size=12,color="transparent",stroke=0,shape=22) +
geom_line(data=subset(c35data,indicator==c35names[1]),aes(y=value*c35.ratio,color=indicator),size=2) +
yellowFill +
orangeColor +
guides(fill=guide_legend(title=element_blank(),byrow=TRUE),color=guide_legend(title=element_blank(),byrow=TRUE)) +
simple_style  +
scale_y_continuous(
expand = c(0,0),
limits=c(0,max(c35.oda.max*1.1,1)),
sec.axis = sec_axis(~./c35.ratio, name="% of total ODA",labels = function(x) paste0(x, "%"))
) +
scale_x_continuous(breaks = seq(min(c35data$year),max(c35data$year),by=3)) +
theme(
legend.position="right"
,legend.box = "vertical"
,legend.text = element_text(size=25,color=blue,family="Averta Regular")
,legend.justification=c(0,1)
# ,legend.box.just = "left"
,legend.direction="vertical"
,axis.title.x=element_blank()
,axis.title.y=element_text(size=20,color=blue,family="Averta Regular")
,axis.ticks=element_blank()
,axis.line.y = element_blank()
,axis.line.x = element_line(color=blue,size=0.2)
,axis.text.y = element_text(size=25,color=dark.grey,family="Averta Regular")
,axis.text.x = element_text(size=25,color=blue,margin=margin(t=20,r=0,b=0,l=0),family="Averta Regular")
,panel.grid.major.y = element_line(color=grey,size=0.2)
,legend.background = element_rect(fill = "transparent", colour = "transparent")
,legend.key.width = unit(1,"cm")
) + labs(y = y.lab)
}else{
c35 = NULL
}
if(this.country=="Global"){
c35names = c("% of total ODA","Basic nutrition ODA received")
indicators=c("BN_ODA_received_percent","BN_ODA_received")
y.lab = "ODA, US$ millions"
c35data = subset(countrydat,indicator %in% indicators)
if(!empty(c35data)){
c35data$value = as.numeric(c35data$value)
c35data = subset(c35data, !is.na(value))
c35data = c35data[c("year","indicator","value")]
c35.oda.max <- max(subset(c35data,indicator==indicators[2])$value,na.rm=TRUE)
c35.perc.max <- max(subset(c35data,indicator==indicators[1])$value,na.rm=TRUE)
# Why *1.25? Need to sort.
c35.ratio = (c35.oda.max/c35.perc.max)*1.25
c35.oda.max = c35.oda.max*1.25
for(j in 1:length(indicators)){
ind = indicators[j]
indname = c35names[j]
c35data$indicator[which(c35data$indicator==ind)] = indname
}
c35.key.data.2 = data.frame(year=as.numeric(rep(NA,1)),indicator=c35names[2],value=as.numeric(rep(NA,1)))
c35.key.data.1 = data.frame(year=as.numeric(rep(NA,1)),indicator=c35names[1],value=as.numeric(rep(NA,1)))
c35 = ggplot(subset(c35data,indicator==c35names[2]),aes(x=year,y=value)) +
geom_area(alpha=1,show.legend=F,color="transparent",fill=yellow) +
geom_point(data=c35.key.data.2,aes(group=indicator,fill=indicator),size=12,color="transparent",stroke=0,shape=22) +
geom_line(data=subset(c35data,indicator==c35names[1]),aes(y=value*c35.ratio,color=indicator),size=2) +
yellowFill +
orangeColor +
guides(fill=guide_legend(title=element_blank(),byrow=TRUE),color=guide_legend(title=element_blank(),byrow=TRUE)) +
simple_style  +
scale_y_continuous(
expand = c(0,0),
limits=c(0,max(c35.oda.max*1.1,1)),
sec.axis = sec_axis(~./c35.ratio, name="% of total ODA",labels = function(x) paste0(x, "%"))
) +
scale_x_continuous(breaks = seq(min(c35data$year),max(c35data$year),by=3)) +
theme(
legend.position="right"
,legend.box = "vertical"
,legend.text = element_text(size=25,color=blue,family="Averta Regular")
,legend.justification=c(0,1)
,legend.box.just = "left"
,legend.direction="vertical"
,axis.title.x=element_blank()
,axis.title.y=element_text(size=20,color=blue,family="Averta Regular")
,axis.ticks=element_blank()
,axis.line.y = element_blank()
,axis.line.x = element_line(color=blue, size = 0.2)
,axis.text.y = element_text(size=25,color=dark.grey,family="Averta Regular")
,axis.text.x = element_text(size=25,color=blue,margin=margin(t=20,r=0,b=0,l=0),family="Averta Regular")
,panel.grid.major.y = element_line(color=grey,size=0.2)
,legend.background = element_rect(fill = "transparent", colour = "transparent")
,legend.key.width = unit(1,"cm")
) + labs(y = y.lab)
}
}
# Chart 17
indicators=c(
"Risk_factor_all-rf", "Risk_factor_diet", "Risk_factor_fruits",
"Risk_factor_vegetables", "Risk_factor_legumes","Risk_factor_nuts_seeds",
"Risk_factor_whole_grains","Risk_factor_prc_meat", "Risk_factor_red_meat",
"Risk_factor_SSBs", "Risk_factor_weight","Risk_factor_underweight",
"Risk_factor_overweight", "Risk_factor_obese"
)
c17names = c(
"All risk factors", "Diet", "Low in fruits",
"Low in vegetables", "Low in legumes","Low in nuts & seeds",
"Low in whole-grains", "High in processed meat","High in red meat",
"High in sugary drinks","Weight", "Underweight",
"Overweight", "Obese"
)
c17data = data.table(subset(countrydat,indicator %in% indicators))
c17data$value = as.numeric(c17data$value)
c17data$disagg.value = as.character(c17data$disagg.value)
c17data$disagg.value[which(c17data$disagg.value=="CHD")] = "Coronary Heart Disease"
c17data$disagg.value[which(c17data$disagg.value=="T2DM")] = "Type 2 Diabetes Mellitus"
c17data$disagg.value[which(c17data$disagg.value=="Resp_Dis")] = "Respiratory Disease"
c17data = subset(c17data,year==2018)
c17data = subset(c17data, !is.na(value))
c17data = subset(c17data, disagg.value!="all-c")
c17data = subset(c17data, value>0)
c17data$value = c17data$value / 100000
for(j in 1:length(indicators)){
ind = indicators[j]
indname = c17names[j]
c17data$indicator[which(c17data$indicator==ind)] = indname
}
c17names <- as.character(subset(c17names,c17names %in% unique(c17data$indicator)))
c17data$indicator <- factor(c17data$indicator,levels=c17names)
c17data$disagg.value <- factor(c17data$disagg.value,levels=unique(c17data$disagg.value))
c17data <- c17data[order(c17data$disagg.value, match(c17data$indicator,c17names)),]
c17data <- ddply(c17data, .(disagg.value),
transform, pos = sum(value) - cumsum(value)
,valid = sum(!is.na(value),na.rm=TRUE))
c17.key.data = data.frame(
disagg.value = unique(c17data$disagg.value),
indicator = as.numeric(rep(NA,length(unique(c17data$disagg.value)))),
value = as.numeric(rep(NA,length(unique(c17data$disagg.value))))
)
if(nrow(c17data)>0){
c17 = ggplot(c17data,aes(x=indicator,y=value,fill=disagg.value)) +
geom_bar(stat="identity",width=0.7,color="transparent",size=1,show.legend=F) +
geom_point(data=c17.key.data,aes(fill=disagg.value),size=12,color="transparent",stroke=0,shape=22) +
scale_fill_manual(values=quintileFillValues) +
guides(fill=guide_legend(title=element_blank(),nrow=2,byrow=TRUE)) +
simple_style  +
scale_y_continuous(expand = c(0,0)) +
theme(
legend.position="top"
,legend.text = element_text(size=25,color=blue,family="Averta Regular")
,legend.justification=c(0,0)
,legend.direction="horizontal"
,axis.title.x=element_blank()
,axis.title.y=element_text(size=20,color=blue,family="Averta Regular")
,axis.ticks=element_blank()
,axis.line.y = element_blank()
,axis.line.x = element_line(color=blue,size=0.2)
,axis.text.y = element_text(size=25,color=dark.grey,family="Averta Regular")
,axis.text.x = element_text(size=14,color=dark.grey,family="Averta Regular", angle=45, hjust=1, vjust=1)
,panel.grid.major.y = element_line(color=grey,size=0.2)
,legend.background = element_rect(fill = "transparent", colour = "transparent")
,legend.key = element_rect(fill = "transparent", colour = "transparent")
,legend.key.size = unit(2.2,"lines")
) +
scale_color_manual(breaks=c17names,values=rep(blue,length(c17names)),drop=FALSE) +
labs(y="Attributable deaths (millions)")
}else{
c17 = NULL
}
# Chart 18
indicators=c(
"planetary_impacts_Cropland", "planetary_impacts_Freshwater",
"planetary_impacts_Greenhouse gases", "planetary_impacts_Nitrogen",
"planetary_impacts_Phosphorus"
)
c18names = c(
"Cropland", "Freshwater",
"Greenhouse gases", "Nitrogen",
"Phosphorus"
)
disagg.values = c(
"beef_lamb", "eggs", "fish", "fruit_veg", "grains",
"legumes", "milk", "nuts_seeds", "oils", "pork_poultry",
"roots", "sugar"
)
disagg.labels = c(
"Beef & lamb", "Eggs",
"Fish", "Fruit & vegetables",
"Grains", "Legumes",
"Milk", "Nuts & seeds",
"Oils", "Pork & poultry",
"Root vegetables", "Sugar"
)
c18data = data.table(subset(countrydat,indicator %in% indicators))
c18data$value = as.numeric(c18data$value)
c18data = subset(c18data,year==2018)
c18data = subset(c18data, !is.na(value))
c18data = subset(c18data, disagg.value!="total")
for(j in 1:length(indicators)){
ind = indicators[j]
indname = c18names[j]
c18data$indicator[which(c18data$indicator==ind)] = indname
}
c18names <- as.character(subset(c18names,c18names %in% unique(c18data$indicator)))
for(j in 1:length(disagg.values)){
da = disagg.values[j]
dl = disagg.labels[j]
c18data$disagg.value[which(c18data$disagg.value==da)] = dl
}
disagg.labels <- as.character(subset(disagg.labels,disagg.labels %in% unique(c18data$disagg.value)))
c18data$indicator <- factor(c18data$indicator,levels=c18names)
c18data$disagg.value <- factor(c18data$disagg.value,levels=disagg.labels)
c18data <- c18data[order(c18data$disagg.value, match(c18data$indicator,c18names)),]
c18data <- ddply(c18data, .(disagg.value),
transform, pos = sum(value) - cumsum(value)
,valid = sum(!is.na(value),na.rm=TRUE))
c18.key.data = data.frame(
disagg.value = unique(c18data$disagg.value),
indicator = as.numeric(rep(NA,length(unique(c18data$disagg.value)))),
value = as.numeric(rep(NA,length(unique(c18data$disagg.value))))
)
if(nrow(c18data)>0){
c18 = ggplot(c18data,aes(x=indicator,y=value,fill=disagg.value)) +
geom_bar(stat="identity",width=0.7,color="transparent",size=1,show.legend=F) +
geom_point(data=c18.key.data,aes(fill=disagg.value),size=12,color="transparent",stroke=0,shape=22) +
duodecaFill +
guides(fill=guide_legend(title=element_blank(),nrow=2,byrow=TRUE)) +
simple_style  +
scale_y_continuous(expand = c(0,0)) +
theme(
legend.position="top"
,legend.text = element_text(size=25,color=blue,family="Averta Regular")
,legend.justification=c(0,0)
,legend.direction="horizontal"
,axis.title.x=element_blank()
,axis.title.y=element_text(size=20,color=blue,family="Averta Regular")
,axis.ticks=element_blank()
,axis.line.y = element_blank()
,axis.line.x = element_line(color=blue,size=0.2)
,axis.text.y = element_text(size=25,color=dark.grey,family="Averta Regular")
,axis.text.x = element_text(size=14,color=dark.grey,family="Averta Regular", angle=45, hjust=1, vjust=1)
,panel.grid.major.y = element_line(color=grey,size=0.2)
,legend.background = element_rect(fill = "transparent", colour = "transparent")
,legend.key = element_rect(fill = "transparent", colour = "transparent")
,legend.key.size = unit(2.2,"lines")
) +
scale_color_manual(breaks=c18names,values=rep(blue,length(c18names)),drop=FALSE) +
labs(y="Planetary Boundary Value (%)")
}else{
c18 = NULL
}
#Chart 19
indicators = c(
"environmental_impacts_beef_lamb", "environmental_impacts_eggs",
"environmental_impacts_fish", "environmental_impacts_fruit_veg",
"environmental_impacts_grains", "environmental_impacts_legumes",
"environmental_impacts_milk", "environmental_impacts_nuts_seeds",
"environmental_impacts_oils", "environmental_impacts_pork_poultry",
"environmental_impacts_roots", "environmental_impacts_sugar"
)
c19names = c(
"Beef & lamb", "Eggs",
"Fish", "Fruit & vegetables",
"Grains", "Legumes",
"Milk", "Nuts & seeds",
"Oils", "Pork & poultry",
"Root vegetables", "Sugar"
)
c19data = data.table(subset(countrydat,indicator %in% indicators))
c19data$value = as.numeric(c19data$value)
c19data$disagg.value[which(c19data$disagg.value=="Greenhouse gas emissions (CH4, N2O) (MtCO2eq)")] = "GHG emissions (CH4, N2O) (MtCO2eq)"
c19data$disagg.value[which(c19data$disagg.value=="Greenhouse gas emissions (life-cycle) (MtCO2eq)")] = "GHG emissions (life-cycle) (MtCO2eq)"
c19data = subset(c19data,year==2018)
c19data = subset(c19data, !is.na(value))
for(j in 1:length(indicators)){
ind = indicators[j]
indname = c19names[j]
c19data$indicator[which(c19data$indicator==ind)] = indname
}
c19names <- as.character(subset(c19names,c19names %in% unique(c19data$indicator)))
c19data$indicator <- factor(c19data$indicator,levels=c19names)
c19data$disagg.value <- factor(c19data$disagg.value,levels=unique(c19data$disagg.value))
c19data <- c19data[order(c19data$disagg.value, match(c19data$indicator,c19names)),]
c19data <- ddply(c19data, .(disagg.value),
transform, pos = sum(value) - cumsum(value)
,valid = sum(!is.na(value),na.rm=TRUE))
c19.key.data = data.frame(
disagg.value = as.numeric(rep(NA,length(unique(c19data$indicator)))),
indicator = unique(c19data$indicator),
value = as.numeric(rep(NA,length(unique(c19data$indicator))))
)
chart_disaggs = c(
"Land use (1000 Mkm2)", "Cropland use (1000 Mkm2)", "Pasture use (1000 Mkm2)", "Freshwater use (km3)",
"GHG emissions (CH4, N2O) (MtCO2eq)", "GHG emissions (life-cycle) (MtCO2eq)",
"Nitrogen application (GgN)", "Phosphorus application (GgP)"
)
c19_chart_names = paste0("c19",c("a","b","c","d","e","f","g","h"))
for(i in 1:length(chart_disaggs)){
chart_disagg = chart_disaggs[i]
c19_chart_name = c19_chart_names[i]
c19subset = subset(c19data,disagg.value==chart_disagg)
if(nrow(c19subset)>0){
if(c19_chart_name %in% c("c19d", "c19h")){
c19tmp = ggplot(subset(c19data,disagg.value==chart_disagg),aes(x=1,y=value,fill=indicator)) +
geom_bar(stat="identity",width=0.7,color="transparent",size=1,show.legend=F) +
geom_point(data=c19.key.data,aes(fill=indicator),size=12,color="transparent",stroke=0,shape=22) +
duodecaFill +
guides(fill=guide_legend(title=element_blank(),ncol=1,bycol=TRUE)) +
simple_style  +
scale_y_continuous(expand = c(0,0)) +
theme(
legend.position="right"
,legend.text = element_text(size=25,color=blue,family="Averta Regular")
,legend.justification=c(0,0)
,legend.direction="vertical"
,axis.title.x=element_blank()
,axis.title.y=element_text(size=20,color=blue,family="Averta Regular")
,axis.ticks=element_blank()
,axis.line.y = element_blank()
,axis.line.x = element_line(color=blue,size=0.2)
,axis.text.y = element_text(size=25,color=dark.grey,family="Averta Regular")
,axis.text.x = element_blank()
,panel.grid.major.y = element_line(color=grey,size=0.2)
,legend.background = element_rect(fill = "transparent", colour = "transparent")
,legend.key = element_rect(fill = "transparent", colour = "transparent")
,legend.key.size = unit(2.2,"lines")
) +
scale_color_manual(breaks=c19names,values=rep(blue,length(c19names)),drop=FALSE) +
labs(y=chart_disagg)
}else{
c19tmp = ggplot(subset(c19data,disagg.value==chart_disagg),aes(x=1,y=value,fill=indicator)) +
geom_bar(stat="identity",width=0.7,color="transparent",size=1,show.legend=F) +
duodecaFill +
simple_style  +
scale_y_continuous(expand = c(0,0)) +
theme(
axis.title.x=element_blank()
,axis.title.y=element_text(size=20,color=blue,family="Averta Regular")
,axis.ticks=element_blank()
,axis.line.y = element_blank()
,axis.line.x = element_line(color=blue,size=0.2)
,axis.text.y = element_text(size=25,color=dark.grey,family="Averta Regular")
,axis.text.x = element_blank()
) +
scale_color_manual(breaks=c19names,values=rep(blue,length(c19names)),drop=FALSE) +
labs(y=chart_disagg)
}
assign(c19_chart_name, c19tmp)
}else{
assign(c19_chart_name, NULL)
}
}
# Rendering
for(i in 1:length(chart.list)){
chart.name = chart.list[i]
print(chart.name)
chart.width = resolutions[i]
if (chart.name %in% chart.update.list.noextension){
chart = get(chart.name)
if(!is.null(chart)){
Cairo(family="Averta Regular",file=paste0(chart.name,".png"),width=chart.width,height=700,units="px",bg="transparent")
tryCatch({print(chart)},error=function(e){})
dev.off()
Cairo(family="Averta Regular",file=paste0(chart.name,".svg"),width=chart.width,height=700,units="px",bg="transparent",dpi=70,type="svg")
tryCatch({print(chart)},error=function(e){})
dev.off()
}
}
}
}
####End loop####
####Setup#####
list.of.packages <- c("grid","ggplot2","reshape2","data.table","scales","varhandle","Cairo","plyr","eulerr","extrafont","ggrepel", "stringi","gridExtra")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
?grid.arrange
grid.arrange(c19a,c19b,c19c,c19d)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
